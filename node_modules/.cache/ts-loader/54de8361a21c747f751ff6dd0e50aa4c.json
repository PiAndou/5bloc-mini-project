{"remainingRequest":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\babel-loader\\lib\\index.js!D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\ts-loader\\index.js??ref--15-2!D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\src\\views\\Home.vue?vue&type=script&lang=ts&","dependencies":[{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\src\\views\\Home.vue","mtime":1644155665833},{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\babel.config.js","mtime":1642883980647},{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644154681877},{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\babel-loader\\lib\\index.js","mtime":1644154681784},{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\ts-loader\\index.js","mtime":1644154698120},{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644154681877},{"path":"D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\vue-loader\\lib\\index.js","mtime":1644154704041}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\COURS\\SUPINFO\\MSC-2\\5BLOC\\5bloc-mini-project\\src\\views\\Home.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue } from \"vue-property-decorator\";\nimport ElectionContract from \"@/../build/contracts/ElectionContract.json\";\nimport Web3 from \"web3\";\n\n@Component({\n  components: {\n    // HelloWorld,\n  },\n})\nexport default class Home extends Vue {\n  web3Instance: Web3 | null = null;\n  deployedElectionContractAddr: string | null = null;\n  deployedElectionContract: any = null;\n  currentAddress: string | null = null;\n  currentVoter: any = null;\n  candidates: any[] = [];\n\n  candidateVoteAddr: string | null = null;\n  delegateVoteAddr: string | null = null;\n\n  stubAccounts: any = [];\n\n  async mounted() {\n    const web3Provider = new Web3.providers.HttpProvider(\n      //\"ws://172.25.0.102:8546\"\n      \"http://192.168.12.146:8545\"\n    );\n\n    if (typeof (window as any).ethereum !== \"undefined\") {\n      console.log(\"MetaMask is installed!\");\n\n      // (window as any).ethereum.request({ method: 'eth_requestAccounts' });\n\n      // this.web3Instance = new Web3((window as any).ethereum);\n      this.web3Instance = new Web3(web3Provider);\n\n      console.log(\"web3Instance\", this.web3Instance);\n\n      const fetchedAccounts = await this.web3Instance.eth.getAccounts();\n\n      console.log(\"fetchedAccounts\", fetchedAccounts);\n\n      this.currentAddress = fetchedAccounts[0];\n    } else {\n      console.log(\"MetaMask is not installed\");\n    }\n  }\n\n  beforeDestroy() {\n    if (this.web3Instance) {\n      this.web3Instance = null;\n    }\n  }\n\n  async unlockAccount(address: string, password: string) {\n    // unlock for a long time\n    this.web3Instance!.eth.personal.unlockAccount(address, password, 15000);\n\n    this.currentVoter = await this.getCurrentVoter();\n  }\n\n  async getDeployedContract() {\n    this.deployedElectionContract = new this.web3Instance!.eth.Contract(\n      ElectionContract.abi as any,\n      this.deployedElectionContractAddr!\n    ) as any;\n\n    this.currentVoter = await this.getCurrentVoter();\n    this.candidates = await this.getAllCandidates();\n  }\n\n  async getCurrentVoter() {\n    const res = await this.deployedElectionContract.methods\n      .getCurrentVoter()\n      .call({ from: this.currentAddress });\n\n    console.log(\"currentVoter\", res);\n\n    return res;\n  }\n\n  async addVoters() {\n    const res = await this.deployedElectionContract.methods\n      .addVoters([\"0xa8fF839D83Bd7D853d8B75506589eBeABB6Cb1DF\"])\n      .call({ from: this.currentAddress });\n  }\n\n  async vote() {\n    const res = await this.deployedElectionContract.methods\n      .vote(this.candidateVoteAddr)\n      .send({ from: this.currentAddress });\n\n    this.candidateVoteAddr = null;\n\n    // Update current voter\n    this.currentVoter = await this.getCurrentVoter();\n\n    console.log(\"voted\", res);\n  }\n\n  async delegateVote() {\n    const res = await this.deployedElectionContract.methods\n      .delegateVote(this.delegateVoteAddr)\n      .send({ from: this.currentAddress });\n\n    this.delegateVoteAddr = null;\n\n    // Update current voter\n    this.currentVoter = await this.getCurrentVoter();\n\n    console.log(\"voted\", res);\n  }\n\n  async getAllCandidates() {\n    const candidates = [];\n    const candidatesCount = Number(\n      await this.deployedElectionContract.methods\n        .candidatesCount()\n        .call({ from: this.currentAddress })\n    );\n\n    console.log(\"candidatesCount\", typeof candidatesCount, candidatesCount);\n\n    for (const [i] of new Array(candidatesCount).entries()) {\n      console.log(\"candidate index\", typeof i, i);\n\n      const candidate = await this.deployedElectionContract.methods\n        .candidatesList(i)\n        .call({ from: this.currentAddress });\n\n      candidates.push(candidate);\n    }\n\n    console.log(\"candiates\", candidates);\n\n    return candidates;\n  }\n\n  async getWinner() {\n    const res = await this.deployedElectionContract.methods\n      .getWinner()\n      .call({ from: this.currentAddress });\n\n    console.log(\"winner\", res);\n  }\n}\n"],"sourceRoot":""}]}